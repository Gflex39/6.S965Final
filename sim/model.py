import numpy as np
from scipy.fftpack import dctn, idctn

DC_TABLE = [
    (0, [0, 0]),
    (1, [0, 1, 0]),
    (2, [0, 1, 1]),
    (3, [1, 0, 0]),
    (4, [1, 0, 1]),
    (5, [1, 1, 0]),
    (6, [1, 1, 1, 0]),
    (7, [1, 1, 1, 1, 0]),
    (8, [1, 1, 1, 1, 1, 0]),
    (9, [1, 1, 1, 1, 1, 1, 0]),
    (10, [1, 1, 1, 1, 1, 1, 1, 0]),
    (11, [1, 1, 1, 1, 1, 1, 1, 1, 0]),
]
DC_TABLE = {k: v for k, v in DC_TABLE}

AC_TABLE = [
    ((0, 0), [1, 0, 1, 0]),
    ((0, 1), [0, 0]),
    ((0, 2), [0, 1]),
    ((0, 3), [1, 0, 0]),
    ((0, 4), [1, 0, 1, 1]),
    ((0, 5), [1, 1, 0, 1, 0]),
    ((0, 6), [1, 1, 1, 1, 0, 0, 0]),
    ((0, 7), [1, 1, 1, 1, 1, 0, 0, 0]),
    ((0, 8), [1, 1, 1, 1, 1, 1, 0, 1, 1, 0]),
    ((0, 9), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0]),
    (
        (0, 10),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1],
    ),
    ((1, 1), [1, 1, 0, 0]),
    ((1, 2), [1, 1, 0, 1, 1]),
    ((1, 3), [1, 1, 1, 1, 0, 0, 1]),
    ((1, 4), [1, 1, 1, 1, 1, 0, 1, 1, 0]),
    ((1, 5), [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0]),
    ((1, 6), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0]),
    ((1, 7), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1]),
    ((1, 8), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0]),
    ((1, 9), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1]),
    (
        (1, 10),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0],
    ),
    ((2, 1), [1, 1, 1, 0, 0]),
    ((2, 2), [1, 1, 1, 1, 1, 0, 0, 1]),
    ((2, 3), [1, 1, 1, 1, 1, 1, 0, 1, 1, 1]),
    ((2, 4), [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0]),
    ((2, 5), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1]),
    ((2, 6), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0]),
    ((2, 7), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1]),
    ((2, 8), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0]),
    ((2, 9), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1]),
    (
        (2, 10),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0],
    ),
    ((3, 1), [1, 1, 1, 0, 1, 0]),
    ((3, 2), [1, 1, 1, 1, 1, 0, 1, 1, 1]),
    ((3, 3), [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1]),
    ((3, 4), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1]),
    ((3, 5), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0]),
    ((3, 6), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1]),
    ((3, 7), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0]),
    ((3, 8), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1]),
    ((3, 9), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0]),
    (
        (3, 10),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1],
    ),
    ((4, 1), [1, 1, 1, 0, 1, 1]),
    ((4, 2), [1, 1, 1, 1, 1, 1, 1, 0, 0, 0]),
    ((4, 3), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0]),
    ((4, 4), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1]),
    ((4, 5), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0]),
    ((4, 6), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1]),
    ((4, 7), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0]),
    ((4, 8), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1]),
    ((4, 9), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0]),
    (
        (4, 10),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1],
    ),
    ((5, 1), [1, 1, 1, 1, 0, 1, 0]),
    ((5, 2), [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]),
    ((5, 3), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0]),
    ((5, 4), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1]),
    ((5, 5), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0]),
    ((5, 6), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1]),
    ((5, 7), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0]),
    ((5, 8), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1]),
    ((5, 9), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0]),
    (
        (5, 10),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1],
    ),
    ((6, 1), [1, 1, 1, 1, 0, 1, 1]),
    ((6, 2), [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0]),
    ((6, 3), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0]),
    ((6, 4), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1]),
    ((6, 5), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0]),
    ((6, 6), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1]),
    ((6, 7), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0]),
    ((6, 8), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1]),
    ((6, 9), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0]),
    (
        (6, 10),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1],
    ),
    ((7, 1), [1, 1, 1, 1, 1, 0, 1, 0]),
    ((7, 2), [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]),
    ((7, 3), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0]),
    ((7, 4), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1]),
    ((7, 5), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0]),
    ((7, 6), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1]),
    ((7, 7), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0]),
    ((7, 8), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1]),
    ((7, 9), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0]),
    (
        (7, 10),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1],
    ),
    ((8, 1), [1, 1, 1, 1, 1, 1, 0, 0, 0]),
    ((8, 2), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0]),
    ((8, 3), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0]),
    ((8, 4), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1]),
    ((8, 5), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0]),
    ((8, 6), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1]),
    ((8, 7), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0]),
    ((8, 8), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1]),
    ((8, 9), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0]),
    (
        (8, 10),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
    ),
    ((9, 1), [1, 1, 1, 1, 1, 1, 0, 0, 1]),
    ((9, 2), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0]),
    ((9, 3), [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1]),
    ((9, 4), [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0]),
    ((9, 5), [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1]),
    ((9, 6), [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0]),
    ((9, 7), [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1]),
    ((9, 8), [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0]),
    ((9, 9), [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1]),
    (
        (9, 10),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0],
    ),
    ((10, 1), [1, 1, 1, 1, 1, 1, 0, 1, 0]),
    (
        (10, 2),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1],
    ),
    (
        (10, 3),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0],
    ),
    (
        (10, 4),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1],
    ),
    (
        (10, 5),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0],
    ),
    (
        (10, 6),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1],
    ),
    (
        (10, 7),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0],
    ),
    (
        (10, 8),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1],
    ),
    (
        (10, 9),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0],
    ),
    (
        (10, 10),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1],
    ),
    ((11, 1), [1, 1, 1, 1, 1, 1, 1, 0, 0, 1]),
    (
        (11, 2),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0],
    ),
    (
        (11, 3),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1],
    ),
    (
        (11, 4),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0],
    ),
    (
        (11, 5),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1],
    ),
    (
        (11, 6),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0],
    ),
    (
        (11, 7),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1],
    ),
    (
        (11, 8),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0],
    ),
    (
        (11, 9),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1],
    ),
    (
        (11, 10),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0],
    ),
    ((12, 1), [1, 1, 1, 1, 1, 1, 1, 0, 1, 0]),
    (
        (12, 2),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1],
    ),
    (
        (12, 3),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0],
    ),
    (
        (12, 4),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1],
    ),
    (
        (12, 5),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0],
    ),
    (
        (12, 6),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1],
    ),
    (
        (12, 7),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0],
    ),
    (
        (12, 8),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
    ),
    (
        (12, 9),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    ),
    (
        (12, 10),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1],
    ),
    ((13, 1), [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0]),
    (
        (13, 2),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0],
    ),
    (
        (13, 3),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1],
    ),
    (
        (13, 4),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0],
    ),
    (
        (13, 5),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1],
    ),
    (
        (13, 6),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0],
    ),
    (
        (13, 7),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
    ),
    (
        (13, 8),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0],
    ),
    (
        (13, 9),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1],
    ),
    (
        (13, 10),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0],
    ),
    (
        (14, 1),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1],
    ),
    (
        (14, 2),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0],
    ),
    (
        (14, 3),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1],
    ),
    (
        (14, 4),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
    ),
    (
        (14, 5),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1],
    ),
    (
        (14, 6),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    ),
    (
        (14, 7),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1],
    ),
    (
        (14, 8),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0],
    ),
    (
        (14, 9),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1],
    ),
    (
        (14, 10),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0],
    ),
    ((15, 0), [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1]),
    (
        (15, 1),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    ),
    (
        (15, 2),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0],
    ),
    (
        (15, 3),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
    ),
    (
        (15, 4),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
    ),
    (
        (15, 5),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
    ),
    (
        (15, 6),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0],
    ),
    (
        (15, 7),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1],
    ),
    (
        (15, 8),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
    ),
    (
        (15, 9),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
    ),
    (
        (15, 10),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    ),
    (
        (-1, -1),
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
),
]
AC_TABLE = {k: v for k, v in AC_TABLE}

SCAN_ORDER_TABLE = [
    0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20,
    13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59,
    52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63,
]

QUANTIZATION_TABLE = [
    16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56,
    14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113,
    92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99,
]

def encode_value(x: int, sz: int, l: list):
    if sz == 0:
        return
    x = x if x > 0 else x - 1
    x = x & ((1 << sz) - 1)
    for i in range(sz):
        b = 1 if ((x & (1 << (sz-1-i))) != 0) else 0
        l.append(b)

def get_size(x):
    if x == 0:
        return 0
    return len(np.binary_repr(np.abs(x)))

def encode_block(x: np.ndarray) -> list[int]:
    x = x.flatten()
    l = []

    dc_coeff = x[0]
    dc_coeff_sz = get_size(dc_coeff)
    for b in DC_TABLE[dc_coeff_sz]:
        l.append(b)
    encode_value(dc_coeff, dc_coeff_sz, l)

    run = 0
    for ac_coeff in x[1:]:
        if ac_coeff != 0:
            while run > 16:
                for b in AC_TABLE[(15,0)]:
                    l.append(b)

            ac_coeff_sz = get_size(ac_coeff)
            for b in AC_TABLE[(run, ac_coeff_sz)]:
                l.append(b)
            encode_value(ac_coeff, ac_coeff_sz, l)
            run = 0
        else:
            run += 1

    if run > 0:
        for b in AC_TABLE[(0,0)]:
            l.append(b)

    return l

def zigzag(y: np.ndarray) -> np.ndarray:
    z = np.zeros(64, dtype=int)

    for j in range(len(y)):
        z[j] = int(y[SCAN_ORDER_TABLE[j]])

    return z

def transform(x: np.ndarray) -> np.ndarray:
    assert x.shape == (8,8)

    x -= 128
    y = dctn(x, norm='ortho')

    y = y.flatten()

    return y


def quantize(y: np.ndarray) -> np.ndarray:
    q = np.zeros(64)

    for i in range(len(y)):
        q[i] = np.round(y[i] / QUANTIZATION_TABLE[i])

    return q.astype(int)

def unquantize(y: np.ndarray) -> np.ndarray:
    q = np.zeros(64)

    for i in range(len(y)):
        q[i] = y[i] * QUANTIZATION_TABLE[i]

    return q.astype(int)

def untransform(y: np.ndarray) -> np.ndarray:
    return (idctn(y.reshape((8,8)), norm='ortho')+128).astype(int)